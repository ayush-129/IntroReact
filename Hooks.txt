function App() {
  let counter = 15;

  const addValue = () => {
    console.log("clicked", counter);
    counter = counter + 1;
  };

  return (
    <>
      <h1>React Counter</h1>
      <h2>Counter Value:{counter}</h2>
      <button onClick={addValue}>Add Value</button>
      <br />
      <br />
      <button>Remove Value</button>
    </>
  );
}
The above code is updating the values in console.
For UI updation, we can do stuffs like eventlistenser and all. but its quite tiresome process for simple UI updation.
Here comes the importance of React.
Basically 'React' react on variables updation.

React brings Hooks for updation:
useContext
useState
useReducer
useEffect
useInsertionEffect
useLayoutEffect
useCallback
useMemo

--------------- useState ---------------------
It gives 2 values in the form of array.
arr[0] gives the initilisation to the value
arr[1] is the method which control/responsible to update the arr[0] variable
let [counter,setCounter] = useState(15)   // 15 is default 

function App() {
  let [counter, setCounter] = useState(15);

  const addValue = () => {
    counter = counter + 1;
    setCounter(counter);
  };

  return (
    <>
      <h1>React Counter</h1>
      <h2>Counter Value:{counter}</h2>
      <button onClick={addValue}>Add Value</button>
      <br />
      <br />
      <button>Remove Value</button>
    </>
  );
}